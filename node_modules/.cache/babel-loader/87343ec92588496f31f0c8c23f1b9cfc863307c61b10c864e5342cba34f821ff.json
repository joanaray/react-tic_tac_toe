{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joana\\\\Joana\\\\WebDev\\\\_sandbox\\\\react-tic_tac_toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  let moves = history.map((squares, move) => {\n    let description;\n    let btnStatus;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    if (currentMove === move) {\n      btnStatus = \"active\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      id: move,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: btnStatus,\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  });\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares]; // The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  function reset() {\n    for (let i = 0; i < currentSquares.length; i++) {\n      currentSquares[i] = null;\n    }\n    setCurrentMove(0);\n    jumpTo(0);\n    resetHistory(setHistory);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        winnerSquares: currentSquares,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-plays\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => reset(),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/** -- COMPONENTS -- */\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c = Game;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  winnerSquares\n}) {\n  _s2();\n  const [isWinner, setIsWinner] = useState(\"\");\n  for (let a = 0; a < winnerSquares.length; a++) {\n    for (let b = 0; b < winner.length; b++) {}\n    winnerSquares[a] = isWinner;\n  }\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares, winnerSquares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? nextSquares[i] = \"X\" : nextSquares[i] = \"O\";\n    onPlay(nextSquares);\n  }\n\n  /** Update player message */\n  const winner = calculateWinner(squares, winnerSquares);\n  let status;\n  const emptySquares = squares.slice();\n  if (winner) {\n    status = \"Winner: \" + winner[0];\n  } else if (!emptySquares.includes(null)) {\n    status = \"No one wins.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    console.log(\"Empty squares? \" + emptySquares);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        squareStatus: winnerSquares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        squareStatus: winnerSquares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        squareStatus: winnerSquares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        squareStatus: winnerSquares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        squareStatus: winnerSquares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        squareStatus: winnerSquares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        squareStatus: winnerSquares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        squareStatus: winnerSquares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        squareStatus: winnerSquares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s2(Board, \"9JTv3SaNZ1K+2feK6O1cc/+0Od8=\");\n_c2 = Board;\nfunction Square({\n  value,\n  squareStatus,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: `square ${squareStatus}`,\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n\n/** -- FUNCTIONS -- */\n_c3 = Square;\nfunction resetHistory(el) {\n  el([Array(9).fill(null)]);\n}\nfunction calculateWinner(squares, winnerSquares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6], [0, 4, 8]];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      return [squares[a], winnerSquares[a], winnerSquares[b], winnerSquares[c]];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Square\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","xIsNext","currentSquares","moves","map","squares","move","description","btnStatus","id","children","type","className","onClick","jumpTo","fileName","_jsxFileName","lineNumber","columnNumber","handlePlay","nextSquares","nextHistory","slice","length","nextMove","reset","i","resetHistory","Board","winnerSquares","onPlay","_c","_s2","isWinner","setIsWinner","a","b","winner","handleClick","calculateWinner","status","emptySquares","includes","console","log","Square","value","squareStatus","onSquareClick","_c2","_c3","el","lines","c","$RefreshReg$"],"sources":["C:/Users/Joana/Joana/WebDev/_sandbox/react-tic_tac_toe/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  let moves = history.map((squares, move) => {\n    let description;\n    let btnStatus;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    if (currentMove === move) {\n      btnStatus = \"active\";\n    }\n    return (\n      <li key={move} id={move}>\n        <button\n          type=\"button\"\n          className={btnStatus}\n          onClick={() => jumpTo(move)}\n        >\n          {description}\n        </button>\n      </li>\n    );\n  });\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares]; // The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  function reset() {\n    for (let i = 0; i < currentSquares.length; i++) {\n      currentSquares[i] = null;\n    }\n    setCurrentMove(0);\n    jumpTo(0);\n    resetHistory(setHistory);\n  }\n\n  return (\n    <>\n      <div className=\"game-board\">\n        <Board\n          xIsNext={xIsNext}\n          winnerSquares={currentSquares}\n          squares={currentSquares}\n          onPlay={handlePlay}\n        />\n      </div>\n      <div className=\"game-actions\">\n        <div className=\"game-plays\">\n          <ul>{moves}</ul>\n        </div>\n        <div>\n          <button onClick={() => reset()}>Reset</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\n/** -- COMPONENTS -- */\nfunction Board({ xIsNext, squares, onPlay, winnerSquares }) {\n  const [isWinner, setIsWinner] = useState(\"\");\n  for (let a = 0; a < winnerSquares.length; a++) {\n    \n    for (let b = 0; b < winner.length; b++) {}\n    winnerSquares[a] = isWinner;\n  }\n\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares, winnerSquares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? (nextSquares[i] = \"X\") : (nextSquares[i] = \"O\");\n    onPlay(nextSquares);\n  }\n\n  /** Update player message */\n  const winner = calculateWinner(squares, winnerSquares);\n  let status;\n  const emptySquares = squares.slice();\n  if (winner) {\n    status = \"Winner: \" + winner[0];\n  } else if (!emptySquares.includes(null)) {\n    status = \"No one wins.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    console.log(\"Empty squares? \" + emptySquares);\n  }\n\n  return (\n    <>\n      <div id=\"game-table\">\n        <Square\n          value={squares[0]}\n          squareStatus={winnerSquares[0]}\n          onSquareClick={() => handleClick(0)}\n        />\n        <Square\n          value={squares[1]}\n          squareStatus={winnerSquares[1]}\n          onSquareClick={() => handleClick(1)}\n        />\n        <Square\n          value={squares[2]}\n          squareStatus={winnerSquares[2]}\n          onSquareClick={() => handleClick(2)}\n        />\n        <Square\n          value={squares[3]}\n          squareStatus={winnerSquares[3]}\n          onSquareClick={() => handleClick(3)}\n        />\n        <Square\n          value={squares[4]}\n          squareStatus={winnerSquares[4]}\n          onSquareClick={() => handleClick(4)}\n        />\n        <Square\n          value={squares[5]}\n          squareStatus={winnerSquares[5]}\n          onSquareClick={() => handleClick(5)}\n        />\n        <Square\n          value={squares[6]}\n          squareStatus={winnerSquares[6]}\n          onSquareClick={() => handleClick(6)}\n        />\n        <Square\n          value={squares[7]}\n          squareStatus={winnerSquares[7]}\n          onSquareClick={() => handleClick(7)}\n        />\n        <Square\n          value={squares[8]}\n          squareStatus={winnerSquares[8]}\n          onSquareClick={() => handleClick(8)}\n        />\n      </div>\n      <div className=\"status\">{status}</div>\n    </>\n  );\n}\nfunction Square({ value, squareStatus, onSquareClick }) {\n  return (\n    <button\n      type=\"button\"\n      className={`square ${squareStatus}`}\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\n/** -- FUNCTIONS -- */\nfunction resetHistory(el) {\n  el([Array(9).fill(null)]);\n}\nfunction calculateWinner(squares, winnerSquares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [2, 4, 6],\n    [0, 4, 8],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      return [squares[a], winnerSquares[a], winnerSquares[b], winnerSquares[c]];\n    }\n  }\n  return null;\n}\n"],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMa,OAAO,GAAGF,WAAW,GAAG,CAAC,KAAK,CAAC;EACrC,MAAMG,cAAc,GAAGP,OAAO,CAACI,WAAW,CAAC;EAE3C,IAAII,KAAK,GAAGR,OAAO,CAACS,GAAG,CAAC,CAACC,OAAO,EAAEC,IAAI,KAAK;IACzC,IAAIC,WAAW;IACf,IAAIC,SAAS;IACb,IAAIF,IAAI,GAAG,CAAC,EAAE;MACZC,WAAW,GAAG,cAAc,GAAGD,IAAI;IACrC,CAAC,MAAM;MACLC,WAAW,GAAG,kBAAkB;IAClC;IACA,IAAIR,WAAW,KAAKO,IAAI,EAAE;MACxBE,SAAS,GAAG,QAAQ;IACtB;IACA,oBACElB,OAAA;MAAemB,EAAE,EAAEH,IAAK;MAAAI,QAAA,eACtBpB,OAAA;QACEqB,IAAI,EAAC,QAAQ;QACbC,SAAS,EAAEJ,SAAU;QACrBK,OAAO,EAAEA,CAAA,KAAMC,MAAM,CAACR,IAAI,CAAE;QAAAI,QAAA,EAE3BH;MAAW;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC,GAPFZ,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQT,CAAC;EAET,CAAC,CAAC;EAEF,SAASC,UAAUA,CAACC,WAAW,EAAE;IAC/B,MAAMC,WAAW,GAAG,CAAC,GAAG1B,OAAO,CAAC2B,KAAK,CAAC,CAAC,EAAEvB,WAAW,GAAG,CAAC,CAAC,EAAEqB,WAAW,CAAC,CAAC,CAAC;IACzExB,UAAU,CAACyB,WAAW,CAAC;IACvBrB,cAAc,CAACqB,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC;EACxC;EAEA,SAAST,MAAMA,CAACU,QAAQ,EAAE;IACxBxB,cAAc,CAACwB,QAAQ,CAAC;EAC1B;EAEA,SAASC,KAAKA,CAAA,EAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,cAAc,CAACqB,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC9CxB,cAAc,CAACwB,CAAC,CAAC,GAAG,IAAI;IAC1B;IACA1B,cAAc,CAAC,CAAC,CAAC;IACjBc,MAAM,CAAC,CAAC,CAAC;IACTa,YAAY,CAAC/B,UAAU,CAAC;EAC1B;EAEA,oBACEN,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACEpB,OAAA;MAAKsB,SAAS,EAAC,YAAY;MAAAF,QAAA,eACzBpB,OAAA,CAACsC,KAAK;QACJ3B,OAAO,EAAEA,OAAQ;QACjB4B,aAAa,EAAE3B,cAAe;QAC9BG,OAAO,EAAEH,cAAe;QACxB4B,MAAM,EAAEX;MAAW;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN5B,OAAA;MAAKsB,SAAS,EAAC,cAAc;MAAAF,QAAA,gBAC3BpB,OAAA;QAAKsB,SAAS,EAAC,YAAY;QAAAF,QAAA,eACzBpB,OAAA;UAAAoB,QAAA,EAAKP;QAAK;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACN5B,OAAA;QAAAoB,QAAA,eACEpB,OAAA;UAAQuB,OAAO,EAAEA,CAAA,KAAMY,KAAK,CAAC,CAAE;UAAAf,QAAA,EAAC;QAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP;;AAEA;AAAAxB,EAAA,CAvEwBD,IAAI;AAAAsC,EAAA,GAAJtC,IAAI;AAwE5B,SAASmC,KAAKA,CAAC;EAAE3B,OAAO;EAAEI,OAAO;EAAEyB,MAAM;EAAED;AAAc,CAAC,EAAE;EAAAG,GAAA;EAC1D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAC5C,KAAK,IAAI+C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,aAAa,CAACN,MAAM,EAAEY,CAAC,EAAE,EAAE;IAE7C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACd,MAAM,EAAEa,CAAC,EAAE,EAAE,CAAC;IACzCP,aAAa,CAACM,CAAC,CAAC,GAAGF,QAAQ;EAC7B;EAEA,SAASK,WAAWA,CAACZ,CAAC,EAAE;IACtB;IACA,IAAIrB,OAAO,CAACqB,CAAC,CAAC,IAAIa,eAAe,CAAClC,OAAO,EAAEwB,aAAa,CAAC,EAAE;MACzD;IACF;;IAEA;IACA;IACA,MAAMT,WAAW,GAAGf,OAAO,CAACiB,KAAK,CAAC,CAAC;IACnCrB,OAAO,GAAImB,WAAW,CAACM,CAAC,CAAC,GAAG,GAAG,GAAKN,WAAW,CAACM,CAAC,CAAC,GAAG,GAAI;IACzDI,MAAM,CAACV,WAAW,CAAC;EACrB;;EAEA;EACA,MAAMiB,MAAM,GAAGE,eAAe,CAAClC,OAAO,EAAEwB,aAAa,CAAC;EACtD,IAAIW,MAAM;EACV,MAAMC,YAAY,GAAGpC,OAAO,CAACiB,KAAK,CAAC,CAAC;EACpC,IAAIe,MAAM,EAAE;IACVG,MAAM,GAAG,UAAU,GAAGH,MAAM,CAAC,CAAC,CAAC;EACjC,CAAC,MAAM,IAAI,CAACI,YAAY,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;IACvCF,MAAM,GAAG,cAAc;EACzB,CAAC,MAAM;IACLA,MAAM,GAAG,eAAe,IAAIvC,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;IAChD0C,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGH,YAAY,CAAC;EAC/C;EAEA,oBACEnD,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACEpB,OAAA;MAAKmB,EAAE,EAAC,YAAY;MAAAC,QAAA,gBAClBpB,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5B,OAAA,CAACuD,MAAM;QACLC,KAAK,EAAEzC,OAAO,CAAC,CAAC,CAAE;QAClB0C,YAAY,EAAElB,aAAa,CAAC,CAAC,CAAE;QAC/BmB,aAAa,EAAEA,CAAA,KAAMV,WAAW,CAAC,CAAC;MAAE;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN5B,OAAA;MAAKsB,SAAS,EAAC,QAAQ;MAAAF,QAAA,EAAE8B;IAAM;MAAAzB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eACtC,CAAC;AAEP;AAACc,GAAA,CAtFQJ,KAAK;AAAAqB,GAAA,GAALrB,KAAK;AAuFd,SAASiB,MAAMA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC;AAAc,CAAC,EAAE;EACtD,oBACE1D,OAAA;IACEqB,IAAI,EAAC,QAAQ;IACbC,SAAS,EAAG,UAASmC,YAAa,EAAE;IACpClC,OAAO,EAAEmC,aAAc;IAAAtC,QAAA,EAEtBoC;EAAK;IAAA/B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;;AAEA;AAAAgC,GAAA,GAZSL,MAAM;AAaf,SAASlB,YAAYA,CAACwB,EAAE,EAAE;EACxBA,EAAE,CAAC,CAACtD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3B;AACA,SAASyC,eAAeA,CAAClC,OAAO,EAAEwB,aAAa,EAAE;EAC/C,MAAMuB,KAAK,GAAG,CACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EACD,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,KAAK,CAAC7B,MAAM,EAAEG,CAAC,EAAE,EAAE;IACrC;IACA,MAAM,CAACS,CAAC,EAAEC,CAAC,EAAEiB,CAAC,CAAC,GAAGD,KAAK,CAAC1B,CAAC,CAAC,CAAC,CAAC;;IAE5B,IAAIrB,OAAO,CAAC8B,CAAC,CAAC,IAAI9B,OAAO,CAAC8B,CAAC,CAAC,KAAK9B,OAAO,CAAC+B,CAAC,CAAC,IAAI/B,OAAO,CAAC8B,CAAC,CAAC,KAAK9B,OAAO,CAACgD,CAAC,CAAC,EAAE;MACxEV,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGvC,OAAO,CAAC8B,CAAC,CAAC,CAAC;MACnD,OAAO,CAAC9B,OAAO,CAAC8B,CAAC,CAAC,EAAEN,aAAa,CAACM,CAAC,CAAC,EAAEN,aAAa,CAACO,CAAC,CAAC,EAAEP,aAAa,CAACwB,CAAC,CAAC,CAAC;IAC3E;EACF;EACA,OAAO,IAAI;AACb;AAAC,IAAAtB,EAAA,EAAAkB,GAAA,EAAAC,GAAA;AAAAI,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAL,GAAA;AAAAK,YAAA,CAAAJ,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}