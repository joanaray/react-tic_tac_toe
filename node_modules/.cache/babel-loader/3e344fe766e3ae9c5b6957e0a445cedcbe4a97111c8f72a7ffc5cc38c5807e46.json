{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joana\\\\Joana\\\\WebDev\\\\_sandbox\\\\react-tic_tac_toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nexport default function Game() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n  function handlePlay(nextSquares) {\n    setXIsNext(!xIsNext);\n  }\n  return /*#__PURE__*/_jsxDEV(Board, {\n    xIsNext: xIsNext,\n    squares: currentSquares,\n    onPlay: handlePlay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"SgYnsXT3crq7e7AVQFAc92TDVPk=\");\n_c2 = Game;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? nextSquares[i] = \"X\" : nextSquares[i] = \"O\";\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  function reset() {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i] = null;\n    }\n    const nextSquares = squares.slice();\n    setSquares(nextSquares);\n    setXIsNext(true);\n    status = \"Next player: X\";\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => reset(),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c3 = Board;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6], [0, 4, 8]];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Game\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Game","_s","xIsNext","setXIsNext","history","setHistory","Array","fill","currentSquares","length","handlePlay","nextSquares","Board","squares","onPlay","_c2","handleClick","i","calculateWinner","slice","winner","status","reset","setSquares","id","_c3","lines","a","b","c","console","log","$RefreshReg$"],"sources":["C:/Users/Joana/Joana/WebDev/_sandbox/react-tic_tac_toe/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? (nextSquares[i] = \"X\") : (nextSquares[i] = \"O\");\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  function reset() {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i] = null;\n    }\n    const nextSquares = squares.slice();\n    setSquares(nextSquares);\n    setXIsNext(true);\n    status = \"Next player: X\";\n  }\n\n  return (\n    <>\n      <div id=\"game-board\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n      <div className=\"status\">{status}</div>\n      <div>\n        <button onClick={() => reset()}>Reset</button>\n      </div>\n    </>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [2, 4, 6],\n    [0, 4, 8],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}