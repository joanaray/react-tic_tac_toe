{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joana\\\\Joana\\\\WebDev\\\\_sandbox\\\\react-tic_tac_toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nexport default function Game() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[history.length - 1];\n  let resetStatus = 0;\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]); // The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.\n    setXIsNext(!xIsNext);\n  }\n  let moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  });\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(xIsNext % 2 === 0);\n  }\n  function reset() {\n    for (let i = 0; i < currentSquares.length; i++) {\n      currentSquares[i] = null;\n    }\n    const nextSquares = currentSquares.slice();\n    setHistory([...history, nextSquares]);\n    setXIsNext(true);\n    resetStatus = 1;\n    jumpTo(0);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-plays\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => reset(),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"okRVHJRbGlWwbwRvnd853Um8Ejo=\");\n_c2 = Game;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  resetStatus\n}) {\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? nextSquares[i] = \"X\" : nextSquares[i] = \"O\";\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner || resetStatus === 0) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c3 = Board;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6], [0, 4, 8]];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Game\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Game","_s","xIsNext","setXIsNext","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","length","resetStatus","handlePlay","nextSquares","moves","map","squares","move","description","jumpTo","nextMove","reset","i","slice","Board","onPlay","_c2","handleClick","calculateWinner","winner","status","id","_c3","lines","a","b","c","console","log","$RefreshReg$"],"sources":["C:/Users/Joana/Joana/WebDev/_sandbox/react-tic_tac_toe/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[history.length - 1];\n  let resetStatus = 0;\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]); // The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.\n    setXIsNext(!xIsNext);\n  }\n\n  let moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(xIsNext % 2 === 0);\n  }\n\n  function reset() {\n    for (let i = 0; i < currentSquares.length; i++) {\n      currentSquares[i] = null;\n    }\n    const nextSquares = currentSquares.slice();\n    setHistory([...history, nextSquares]);\n    setXIsNext(true);\n    resetStatus = 1;\n    jumpTo(0);\n  }\n\n  return (\n    <>\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-actions\">\n        <div className=\"game-plays\">\n          <ul>{moves}</ul>\n        </div>\n        <div>\n          <button onClick={() => reset()}>Reset</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay, resetStatus }) {\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? (nextSquares[i] = \"X\") : (nextSquares[i] = \"O\");\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner || resetStatus === 0) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <>\n      <div id=\"game-table\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n      <div className=\"status\">{status}</div>\n    </>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [2, 4, 6],\n    [0, 4, 8],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}