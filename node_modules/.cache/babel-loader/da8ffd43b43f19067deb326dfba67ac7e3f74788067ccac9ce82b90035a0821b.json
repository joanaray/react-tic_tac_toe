{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joana\\\\Joana\\\\WebDev\\\\_sandbox\\\\react-tic_tac_toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  let moves = history.map((squares, move) => {\n    let description;\n    let btnStatus;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    if (currentMove === move) {\n      btnStatus = \"active\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      id: move,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: btnStatus,\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  });\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares]; // The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  function reset() {\n    for (let i = 0; i < currentSquares.length; i++) {\n      currentSquares[i] = null;\n    }\n    setCurrentMove(0);\n    jumpTo(0);\n    resetHistory(setHistory);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-plays\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => reset(),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/** -- COMPONENTS -- */\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c = Game;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  _s2();\n  const [isWinner, setIsWinner] = useState(false);\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? nextSquares[i] = \"X\" : nextSquares[i] = \"O\";\n    onPlay(nextSquares);\n  }\n\n  /** Update player message */\n  const winner = calculateWinner(squares);\n  let status;\n  const emptySquares = squares.slice();\n  if (winner) {\n    status = \"Winner: \" + winner[0];\n  } else if (!emptySquares.includes(null)) {\n    status = \"No one wins.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    console.log(\"Empty squares? \" + emptySquares);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        squareStatus: activeWinner[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        squareStatus: activeWinner[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        squareStatus: activeWinner[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        squareStatus: activeWinner[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        squareStatus: activeWinner[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        squareStatus: activeWinner[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        squareStatus: activeWinner[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        squareStatus: activeWinner[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        squareStatus: activeWinner[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s2(Board, \"JJRmjmRna0yPzdL3KLVdV44/B5Q=\");\n_c2 = Board;\nfunction Square({\n  value,\n  onSquareClick,\n  squareStatus\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: `square ${squareStatus}`,\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n/** -- FUNCTIONS -- */\n_c3 = Square;\nfunction resetHistory(el) {\n  el([Array(9).fill(null)]);\n}\nfunction calculateWinner(squares, squareStatus) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6], [0, 4, 8]];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      squareStatus = 'active';\n      return [squares[a]];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Square\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","xIsNext","currentSquares","moves","map","squares","move","description","btnStatus","id","children","type","className","onClick","jumpTo","fileName","_jsxFileName","lineNumber","columnNumber","handlePlay","nextSquares","nextHistory","slice","length","nextMove","reset","i","resetHistory","Board","onPlay","_c","_s2","isWinner","setIsWinner","handleClick","calculateWinner","winner","status","emptySquares","includes","console","log","Square","value","squareStatus","activeWinner","onSquareClick","_c2","_c3","el","lines","a","b","c","$RefreshReg$"],"sources":["C:/Users/Joana/Joana/WebDev/_sandbox/react-tic_tac_toe/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  let moves = history.map((squares, move) => {\n    let description;\n    let btnStatus;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    if (currentMove === move) {\n      btnStatus = \"active\";\n    }\n    return (\n      <li key={move} id={move}>\n        <button\n          type=\"button\"\n          className={btnStatus}\n          onClick={() => jumpTo(move)}\n        >\n          {description}\n        </button>\n      </li>\n    );\n  });\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares]; // The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  function reset() {\n    for (let i = 0; i < currentSquares.length; i++) {\n      currentSquares[i] = null;\n    }\n    setCurrentMove(0);\n    jumpTo(0);\n    resetHistory(setHistory);\n  }\n\n  return (\n    <>\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-actions\">\n        <div className=\"game-plays\">\n          <ul>{moves}</ul>\n        </div>\n        <div>\n          <button onClick={() => reset()}>Reset</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\n/** -- COMPONENTS -- */\nfunction Board({ xIsNext, squares, onPlay }) {\n  const [isWinner, setIsWinner] = useState(false);\n\n  function handleClick(i) {\n    // If squares already has a value to it (X or O) it'll return early before updating the copied squares list.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    // Creating a copy of squares for the sake of immutability.\n    // Immutability makes complex features much easier to implement and makes it very cheap for components to compare whether their data has changed or not.\n    const nextSquares = squares.slice();\n    xIsNext ? (nextSquares[i] = \"X\") : (nextSquares[i] = \"O\");\n    onPlay(nextSquares);\n  }\n\n  /** Update player message */\n  const winner = calculateWinner(squares);\n  let status;\n  const emptySquares = squares.slice();\n  if (winner) {\n    status = \"Winner: \" + winner[0];\n  } else if (!emptySquares.includes(null)) {\n    status = \"No one wins.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    console.log(\"Empty squares? \" + emptySquares);\n  }\n\n  return (\n    <>\n      <div id=\"game-table\">\n        <Square\n          value={squares[0]}\n          squareStatus={activeWinner[0]}\n          onSquareClick={() => handleClick(0)}\n        />\n        <Square\n          value={squares[1]}\n          squareStatus={activeWinner[1]}\n          onSquareClick={() => handleClick(1)}\n        />\n        <Square\n          value={squares[2]}\n          squareStatus={activeWinner[2]}\n          onSquareClick={() => handleClick(2)}\n        />\n        <Square\n          value={squares[3]}\n          squareStatus={activeWinner[3]}\n          onSquareClick={() => handleClick(3)}\n        />\n        <Square\n          value={squares[4]}\n          squareStatus={activeWinner[4]}\n          onSquareClick={() => handleClick(4)}\n        />\n        <Square\n          value={squares[5]}\n          squareStatus={activeWinner[5]}\n          onSquareClick={() => handleClick(5)}\n        />\n        <Square\n          value={squares[6]}\n          squareStatus={activeWinner[6]}\n          onSquareClick={() => handleClick(6)}\n        />\n        <Square\n          value={squares[7]}\n          squareStatus={activeWinner[7]}\n          onSquareClick={() => handleClick(7)}\n        />\n        <Square\n          value={squares[8]}\n          squareStatus={activeWinner[8]}\n          onSquareClick={() => handleClick(8)}\n        />\n      </div>\n      <div className=\"status\">{status}</div>\n    </>\n  );\n}\nfunction Square({ value, onSquareClick, squareStatus }) {\n  return (\n    <button\n      type=\"button\"\n      className={`square ${squareStatus}`}\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\n/** -- FUNCTIONS -- */\nfunction resetHistory(el) {\n  el([Array(9).fill(null)]);\n}\nfunction calculateWinner(squares, squareStatus) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [2, 4, 6],\n    [0, 4, 8],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    // Destructuring assignment\n    const [a, b, c] = lines[i]; // The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      console.log(\"We have a winner! It's \" + squares[a]);\n      squareStatus = 'active';\n      return [squares[a]];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}